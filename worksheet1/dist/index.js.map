{"version":3,"sources":["../src/index.js"],"names":["connectionString","app","use","massiveInstance","connectSync","get","req","res","db","users","find","id","params","err","length","send","status","products","purchases","set","createServer","listen"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\nimport morgan from 'morgan';\nimport massive from 'massive';\nimport http from 'http';\n\nconst connectionString = \"postgres://localhost/pgguide\";\nconst app = express();\napp.use(morgan('combined'));\n\n// connect to Massive and get the db instance. You can safely use the\n// convenience sync method here because its on app load\n// you can also use loadSync - it's an alias\nconst massiveInstance = massive.connectSync({connectionString : connectionString})\n\napp.get('/users/:id', (req, res) => {\n    const db = app.get('db');\n    db.users.find({id: req.params.id}, (err, users) => {\n      if (users.length > 0) {\n          res.send(users[0]);\n      } else {\n          res.status(404).send(\"Not found\");\n      }\n    });\n});\n\napp.get('/users', (req, res) => {\n    const db = app.get('db');\n    db.users.find((err, users) => {\n      res.send(users);\n    });\n});\n\napp.get('/products/:id', (req, res) => {\n    const db = app.get('db');\n    db.products.find({id: req.params.id}, (err, products) => {\n      if (products.length > 0) {\n        res.send(products[0]);\n      } else {\n        res.status(404).send(\"Not found\");\n      }\n    });\n});\n\napp.get('/products', (req, res) => {\n    const db = app.get('db');\n    db.products.find((err, products) => {\n      res.send(products);\n    });\n});\n\napp.get('/purchases/:id', (req, res) => {\n    const db = app.get('db');\n    db.purchases.find({id: req.params.id}, (err, purchases) => {\n      if (purchases.length > 0) {\n        res.send(purchases[0]);\n      } else {\n        res.status(404).send(\"Not found\");\n      }\n    });\n});\n\napp.get('/purchases', (req, res) => {\n    const db = app.get('db');\n    db.purchases.find((err, purchases) => {\n      res.send(purchases);\n    });\n});\n\n// Set a reference to the massive instance on Express' app:\napp.set('db', massiveInstance);\nhttp.createServer(app).listen(3000);\n"]}